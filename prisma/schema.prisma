// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id        Int          @id @default(autoincrement())
    name      String       @db.VarChar(50)
    email     String       @unique @db.VarChar(255)
    password  String       @db.Text
    address   String?      @db.VarChar(255)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @default(now()) @updatedAt
    roles     RoleOnUser[]
}

model RoleOnUser {
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId Int

    @@id([userId, roleId])
    @@index([roleId])
    @@index([userId])
}

model Role {
    id          Int                @id @default(autoincrement())
    name        String             @unique @db.VarChar(255)
    users       RoleOnUser[]
    permissions PermissionOnRole[]
}

model PermissionOnRole {
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId Int
    role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId       Int

    @@id([permissionId, roleId])
    @@index([roleId])
    @@index([permissionId])
}

model Permission {
    id    Int                @id @default(autoincrement())
    name  String             @unique @db.VarChar(255)
    roles PermissionOnRole[]
}

model Hotel {
    id            Int             @id @default(autoincrement())
    name          String          @unique @db.VarChar(255)
    description   String?         @db.Text
    address       String          @db.VarChar(255)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now()) @updatedAt
    floors        Floor[]
    RoomTypes     RoomType[]
    HotelSettings HotelSetting[]
}

model RoomType {
    id              Int      @id @default(autoincrement())
    name            String   @db.VarChar(255)
    description     String?  @db.Text
    size            String?  @db.VarChar(255)
    supportedPeople Int      @db.Int
    price           Float    @db.Double
    hotel           Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
    hotelId         Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now()) @updatedAt
    rooms           Room[]

    @@unique([hotelId, name])
    @@index([hotelId])
}

model Floor {
    id        Int      @id @default(autoincrement())
    number    Int      @db.Int
    hotelId   Int      @db.Int
    hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    rooms     Room[]

    @@unique([hotelId, number])
    @@index([hotelId])
}

model Room {
    id         Int      @id @default(autoincrement())
    number     Int      @db.Int
    floorId    Int      @db.Int
    floor      Floor    @relation(fields: [floorId], references: [id], onDelete: Cascade)
    roomTypeId Int      @db.Int
    roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@unique([floorId, number])
    @@index([floorId])
    @@index([roomTypeId])
}

model HotelSetting {
    id        Int      @id @default(autoincrement())
    key       String   @db.VarChar(255)
    value     String   @db.Text
    hotelId   Int      @db.Int
    hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([hotelId, key])
    @@index([hotelId])
}
